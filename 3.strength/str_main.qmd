---
title: "Coupling Strength Main Analysis"
format: pdf
editor: visual
---

# Preprocessing

```{r}
#| warning: false
#| message: false
#| include: false
## Remove all unused variables
rm(list=ls())
```

```{r}
#| label: setup
#| include: false
## Load required packages for analysis
## Check installation if running into issue
library(mosaic)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tidyr)
library(Stat2Data)
library(dplyr)
library(meta)
library(metafor)
library(dmetar)
library(metaDigitise)
library(ICC)
library(wildmeta)
library(future)
library(brms)
library(tidybayes)
library(ggplot2)
library(ggridges)
library(glue)
library(stringr)
library(forcats)
library(brmstools)
library(bayesplot)

## Optimize multi-core utilization for increasing iteration speed
options(mc.cores = parallel::detectCores())

## Set default formats
knitr::opts_chunk$set(fig.pos = "H", out.extra = "",
                      tidy = FALSE, size = "small",
                      echo = FALSE, fig.width = 12,
                      fig.height = 5.6, cache = TRUE,
                      tidy.opts = list(blank = FALSE, width.cutoff = 60))
```

```{r}
#| warning: false
#| message: false
## Set default simulation mode
set.seed(2019)
chains = 4
iters = 5000
warmups = 1000

## Set prior
prior_phasemain <- c(prior(normal(0,1), class = "Intercept"),
prior(cauchy(0,0.5), class = "sd"))

## Set prior
prior_strmod <- c(prior(normal(0,1), class = "Intercept"),
                      prior(normal(0,1), class = "b"),
                      prior(cauchy(0,0.5), class = "sd"))
```

```{r}
#| warning: false
#| message: false
## Import datasets
main <- read_csv("~/Desktop/SO-SP-Coupling/so-sp-coupling/7.data/main_run1.csv")
str <- read_csv("~/Desktop/SO-SP-Coupling/so-sp-coupling/7.data/str_run1.csv")
```

```{r}
#| warning: false
#| message: false
## Set column types and extract age data
main <- main |>
  mutate(
    age_m = as.numeric(gsub("(.+)Â±.+", "\\1", age_msd)),
    gender = as.numeric(gender)
  )
main <- main |>
  mutate_if(is.character, tolower)

str <- str |>
  mutate_if(is.character, tolower)

# Extraction study information for the forest plot
main <- main %>%
  mutate(
     lastname = sapply(strsplit(author, " "), function(x) {
     lastname <- tail(x, 1)
     initial <- toupper(substring(lastname, 1, 1))
     rest <- substring(lastname, 2)
      return(paste(initial, rest, sep = ""))
    }),
    studyinfo = paste(lastname, "et al.", year)
  )

## Classify memory tasks

## Combine the main descriptive data and phase table by study id
str_final <- inner_join(main, str, by = "studyid")
```

```{r}
#| warning: false
#| message: false
## Transform from bounded circular-linear pearson's r to unbounded fisher's z
z_phase <- escalc(measure = "ZCOR", ri = es, ni = n.y, data = str_final)
str_final = str_final |>
  mutate(
    esz = z_phase$yi,
    vi = z_phase$vi,
    se = sqrt(z_phase$vi))
```

# Main Model

```{r}
## Using brm to run the bayesian analysis
## Warning: The simulation is anticipated to last for more than 5 minutes
## Warning: Before running, please ensure you have a stable network connection
str_main <- 
  brm(
    esz|se(se) ~ 1 + (1|studyid/esid),
    data = str_final,
    family = gaussian(),
    prior = prior_phasemain,
    sample_prior = T,
    iter = iters, 
    save_pars = save_pars(all = TRUE), 
    control = list(adapt_delta = 0.99, max_treedepth = 15),
    chains = chains,
    warmup = warmups
    )
```

```{r}
#| warning: false
#| message: false
## Check simulation results and plot graph for posterior predictive checks
pp_check(str_main, ndraws = 100)
summary(str_main)
```

```{r}
#| warning: false
#| message: false
## Check MCMC Convergence by trace plots
mcmc_plot(str_main, type = "trace")
```

```{r, fig.height=6}
#| warning: false
#| message: false
## Check MCMC Convergence by Gelman and Rubin diagnostic
library(coda)
amp_posterior <- as.mcmc(str_main)
gelman.diag(amp_posterior[, 1:3])
gelman.plot(amp_posterior[, 1:3])
```

```{r, fig.height=6}
#| warning: false
#| message: false
## Check MCMC Convergence by Geweke diagnostic
geweke.plot(amp_posterior[, 1:3])
```

```{r, fig.height=20, fig.width=16}
#| warning: false
#| message: false
library(gridExtra)
#extract data from the intercepts-only model:
study.draws <- spread_rvars(str_main, `r_studyid`[`esid`, ], b_Intercept) %>%
  mutate(b_Intercept = `r_studyid` + b_Intercept) %>%
  mutate(esid = 1:20) %>%
  mutate(esid = as.factor(esid)) %>%
  select(esid, b_Intercept)                      

pooled.effect.draws <- spread_rvars(str_main, b_Intercept) %>%
  mutate(esid = "Pooled Effect") %>%
  mutate(esid = as.factor(esid)) %>%
  select(esid, b_Intercept)

forest.data <- rbind(study.draws, pooled.effect.draws) %>%
  ungroup() %>%
  mutate(esid = reorder(esid, b_Intercept))

forest.data.summary <- group_by(forest.data, esid) %>%
  mean_qi(b_Intercept)

forest.data <- forest.data %>%
  mutate(fill_color = ifelse(esid %in% c("2", "7", "13", "14", "18"), "Motor", "Declarative"))

forest.data <- forest.data %>%
  mutate(fill_color = ifelse(row_number() == n(), "Pooled", fill_color))

view(forest.data)
forestone <- forest.data[1:11, ]
foresttwo <- forest.data[12:21, ]
forestsumone <- forest.data.summary[1:11, ]
forestsumtwo <- forest.data.summary[12:21, ]
view(forest.data.summary)
forest_plot_F0_col1 <- ggplot(aes(dist = b_Intercept, y = relevel(esid, "Pooled Effect", after = Inf)), 
                         data = forestone) +
  stat_dist_halfeye(aes(fill = fill_color), scale = 0.7, alpha = 0.8, size = 0.8, show_point = T) +
  geom_vline(xintercept = 0.0, color = "black", size = 0.3, linetype = "dotted") +
  geom_text(data = mutate_if(forestsumone, is.numeric, round, 2), aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"), x = Inf), hjust = "inward", size = 6.8) +
  labs(x = "placeholder", y = element_blank()) +
  scale_x_continuous("Effect Size (Fisher's z)", limits = c(-1, 1), breaks = c(-0.5, 0, 0.5)) +
  scale_fill_manual(values = c("Declarative" = "#A6CDE7", "Motor" = "#F9CD88", "Pooled" = "gray")) +
  theme_bw() +
  theme(legend.position = "none",
        axis.title.x = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20)) +
  theme(plot.title = element_text(hjust = 0.5, size = 24))

forest_plot_F0_col2 <- ggplot(aes(dist = b_Intercept, y = relevel(esid, "Pooled Effect", after = Inf)), 
                         data = foresttwo) +
  stat_dist_halfeye(aes(fill = fill_color), scale = 0.7, alpha = 0.8, size = 0.8, show_point = T) +
  geom_vline(xintercept = 0.0, color = "black", size = 0.3, linetype = "dotted") +
  geom_text(data = mutate_if(forestsumtwo, is.numeric, round, 2), aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"), x = Inf), hjust = "inward", size = 6.8) +
  labs(x = "placeholder", y = element_blank()) +
  scale_x_continuous("Effect Size (Fisher's z)", limits = c(-1, 1), breaks = c(-0.5, 0, 0.5)) +
  scale_fill_manual(values = c("Declarative" = "#A6CDE7", "Motor" = "#F9CD88", "Pooled" = "gray")) +
  theme_bw() +
  theme(legend.key.height= unit(1.5, 'cm'),
        legend.key.width= unit(1.5, 'cm'),
        legend.text = element_text(size = 15),
        legend.title = element_text(size = 0),
        axis.title.x = element_text(size = 20),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20)) +
  theme(plot.title = element_text(hjust = 0.5, size = 24)) 

grid.arrange(forest_plot_F0_col1, forest_plot_F0_col2, ncol = 2, widths = c(1.4, 1.8))
```

```{r, fig.height=20}
#| warning: false
#| message: false
freq_phase <- metafor::rma.mv(yi = esz, V = vi, data = str_final, random = ~ 1 | esid/studyid, method = "REML")
metafor::forest(freq_phase)
```

```{r}
#| warning: false
#| message: false
#| eval: false
#| include: false
col.contour = c("gray75", "gray85", "gray95")

funnel(freq_phase,                      
       xlab = expression("Fisher's z"),
       steps = 4, 
       digits = c(1, 2), 
       back = "white",
       hlines = "white",
       las = 1) 

legend(x = 1.6, y = 0.01, 
       legend = c("p < 0.1", "p < 0.05", "p < 0.01"),
       fill = col.contour)

title("Contour-Enhanced Funnel Plot (Coupling Phase)")

# Contour-Enhanced Funnel Plot
contour_funnel <- viz_funnel(x = freq_phase, method = "REML",
                             contours = FALSE, 
                             sig_contours = TRUE, 
                             detail_level = 1,
                             contours_col = "Greys",
                             group = phase_final$studyid,
                             group_legend = TRUE,
                             point_size = 4, 
                             xlab = expression("Fisher's z"), 
                             ylab = "SE"
) +
  scale_color_discrete(type = c("#91BFDB"), 
                       labels = c("Result")) +
  scale_shape_discrete(solid = TRUE, labels = c("Result")) + 
  geom_vline(xintercept = 0, linetype = 2) + 
  theme_classic() + 
  theme(legend.title = element_blank(), 
    legend.position = c(0.8, 0.9), 
    legend.text = element_text(size = 20), 
    text = element_text(size = 20), 
    axis.text = element_text(size = 20, color = "black"),
    axis.line = element_line(size = 0.4), 
    axis.ticks = element_line(size = 0.4, color = "black"), 
    axis.title.y = element_text(angle = 0, vjust = 0.5, 
                                margin = margin(r = 10), 
                                size = 24),
    axis.title.x = element_text(margin = margin(t = 10), size = 24),
    plot.margin = unit(c(0.2, 0, 0, 0), "inches")
  )
contour_funnel
```

```{r}
#| warning: false
#| message: false
library(metaviz)

par(mfrow = c(1, 2))

funnel(freq_phase, xlab = "Fisher's z", digit = 2)
title("Standard Funnel Plot")

funnel(freq_phase, level = c(90, 95, 99), shade = c("white", "red", "orange"), refline = 0, legend = TRUE, xlab = "Fisher's z", ylab = "", digit = 2)
abline(v=0.39, col="darkblue", lty=2)
title("Counter Enhanced Funnel Plot")

par(mfrow = c(1, 1))

viz_sunset(
  freq_phase,
  y_axis = "se",
  true_effect = NULL,
  method = "FE",
  sig_level = 0.05,
  power_stats = TRUE,
  power_contours = "discrete",
  contours = TRUE,
  sig_contours = TRUE,
  text_size = 3,
  point_size = 2,
  xlab = "Effect",
  ylab = NULL,
  x_trans_function = NULL,
  x_breaks = NULL,
  y_breaks = NULL,
  x_limit = NULL,
  y_limit = NULL
)
```

```{r}
#| warning: false
#| message: false
regtest(esz, vi, se, n.y, studyid, data = str_final,
        model="rma", predictor="sei")
ranktest(esz, vi, se, studyid, data = str_final)
```
