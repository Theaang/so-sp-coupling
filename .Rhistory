irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
agree(irr)
kappa2(irr[,1:2])
data(anxiety)
kappa2(anxiety[,1:2], "squared") # predefined set of squared weights
kappa2(anxiety[,1:2], (0:5)^2)
#| warning: false
#| message: false
irr_raw <- read_csv("~/desktop/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
agree(irr)
kappa2(irr[,1:2])
data(anxiety)
kappa2(anxiety[,1:2], "squared") # predefined set of squared weights
kappa2(anxiety[,1:2], (0:5)^2)
#| warning: false
#| message: false
irr_raw <- read_csv("~/desktop/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
agree(irr)
kappa2(irr[,1:2])
data(anxiety)
kappa2(anxiety[,1:2], "squared") # predefined set of squared weights
kappa2(anxiety[,1:2], (0:5)^2)
agree(irr)
kappa2(irr[,1:2])
data(anxiety)
kappa2(anxiety[,1:2], "squared") # predefined set of squared weights
kappa2(anxiety[,1:2], (0:5)^2)
#| warning: false
#| message: false
irr_raw <- read_csv("~/desktop/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
irr
#| warning: false
#| message: false
irr_raw <- read_csv("~/desktop/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
irr
kappa2(irr[,1:2])
#| warning: false
#| message: false
irr_raw <- read_csv("~/desktop/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
irr
kappa2(irr[,1:2])
#| warning: false
#| message: false
irr_raw <- read_csv("~/desktop/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
irr
kappa2(irr[,1:2])
#| warning: false
#| message: false
irr_raw <- read_csv("~/desktop/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
irr
kappa2(irr[,1:2])
#| label: setup
#| include: false
library(tidyverse)
library(knitr)
library(kableExtra)
library(tidyr)
library(Stat2Data)
library(dplyr)
library(irr)
options(digits = 4)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "",
tidy=FALSE, size="small")
#| warning: false
#| message: false
irr_raw <- read_csv("~/desktop/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
irr
agree(irr)
kappa2(irr[,1:2])
#| warning: false
#| message: false
irr_raw <- read_csv("https://raw.githubusercontent.com/Theaang/so-sp-coupling/main/Eval/IRR/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
agree(irr)
kappa2(irr[,1:2])
data(anxiety)
kappa2(anxiety[,1:2], "squared") # predefined set of squared weights
kappa2(anxiety[,1:2], (0:5)^2)
#| label: setup
#| include: false
library(tidyverse)
library(irr)
options(digits = 4)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "",
tidy=FALSE, size="small")
#| warning: false
#| message: false
irr_raw <- read_csv("https://raw.githubusercontent.com/Theaang/so-sp-coupling/main/Eval/IRR/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
agree(irr)
agree(irr)
lm(rater1 ~ rater2, data = irr)
agree(irr)
irr = as.data.frame(irr)
lm(rater1 ~ rater2, data = irr)
agree(irr)
irr = as.data.frame(irr)
cor <- lm(rater1 ~ rater2, data = irr)
msummary(cor)
agree(irr)
irr = as.data.frame(irr)
cor <- cor(rater1 ~ rater2, data = irr)
msummary(cor)
agree(irr)
irr = as.data.frame(irr)
cor(rater1 ~ rater2, data = irr)
#| warning: false
#| message: false
irr_raw <- read_csv("https://raw.githubusercontent.com/Theaang/so-sp-coupling/main/Eval/IRR/IRR.csv")
irr_list <- split(irr_raw, irr_raw$study)
irr <- do.call(cbind, irr_list)
cols_to_remove <- grep("^\\d+\\.study", colnames(irr))
irr <- irr[, -cols_to_remove]
irr <- t(irr)
rater <- c("rater1", "rater2")
colnames(irr) <- rater
agree(irr)
irr = as.data.frame(irr)
cor(rater1 ~ rater2, data = irr)
agree(irr)
irr = as.data.frame(irr)
irr
cor(rater1 ~ rater2, data = irr)
#| label: setup
#| include: false
library(mosaic)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tidyr)
library(Stat2Data)
library(dplyr)
library(meta)
library(metafor)
library(dmetar)
library(metaDigitise)
library(ICC)
library(wildmeta)
library(future)
library(shinyDigitise)
library(CircStats)
library(Directional)
options(digits = 4)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "",
tidy=FALSE, size="small")
set.seed(123)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 打印生成的成绩数据
print(simulated_scores)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 打印生成的成绩数据
print(simulated_scores)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 打印生成的成绩数据
print(simulated_scores)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 打印生成的成绩数据
print(simulated_scores)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 打印生成的成绩数据
print(simulated_scores)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
max_score <- 43  # 最高分
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 确保成绩不会超过最高分
simulated_scores <- pmin(simulated_scores, max_score)
# 打印生成的成绩数据
print(simulated_scores)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
max_score <- 43  # 最高分
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 确保成绩不会超过最高分
simulated_scores <- pmin(simulated_scores, max_score)
# 打印生成的成绩数据
print(simulated_scores)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
max_score <- 43  # 最高分
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 确保成绩不会超过最高分
simulated_scores <- pmin(simulated_scores, max_score)
# 打印生成的成绩数据
print(simulated_scores)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
max_score <- 43  # 最高分
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 确保成绩不会超过最高分
simulated_scores <- pmin(simulated_scores, max_score)
# 打印生成的成绩数据
print(simulated_scores)
# 模拟生成成绩数据
n <- 12
mean_score <- 32.15
median_score <- 33.5
std_dev <- 5.33
max_score <- 43  # 最高分
# 生成符合要求的随机成绩数据
simulated_scores <- rnorm(n, mean = mean_score, sd = std_dev)
# 使用给定的中位数替换成绩数据中的中位数
simulated_scores <- simulated_scores + (median_score - median(simulated_scores))
# 确保成绩不会超过最高分
simulated_scores <- pmin(simulated_scores, max_score)
# 打印生成的成绩数据
print(simulated_scores)
n <- 12
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 12
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 12
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 12
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 12
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 12
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 12
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 12
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 11
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 11
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 11
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 2
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 2
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 2
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 2
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 5
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 5
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = mean_score, sd = std_dev)
n <- 5
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = 32.15, sd = std_dev)
n <- 5
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = 32.15, sd = std_dev)
n <- 5
mean_score <- 32.15
std_dev <- 5.33
rnorm(n, mean = 32.15, sd = std_dev)
#| label: setup
#| include: false
library(mosaic)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tidyr)
library(Stat2Data)
library(dplyr)
library(meta)
library(metafor)
library(dmetar)
library(metaDigitise)
library(ICC)
library(wildmeta)
library(future)
library(shinyDigitise)
library(CircStats)
library(Directional)
options(digits = 4)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "",
tidy=FALSE, size="small")
#| label: setup
#| include: false
library(mosaic)
library(tidyverse)
library(knitr)
library(kableExtra)
library(tidyr)
library(Stat2Data)
library(dplyr)
library(meta)
library(metafor)
library(dmetar)
library(metaDigitise)
library(ICC)
library(wildmeta)
library(future)
library(shinyDigitise)
library(CircStats)
library(Directional)
options(digits = 4)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "",
tidy=FALSE, size="small")
#| warning: false
#| message: false
psycbul <- readxl::read_excel("/Users/thea/Downloads/jopd-5-33-s2.xlsx")
#| warning: false
#| message: false
psycbul_r <- psycbul |>
filter(grepl("Pearson's r", Type_of_ES))
#| warning: false
#| message: false
knitr::kable(favstats(psycbul_r$tau))
dcauchy(0.13, 0, 0.5)
dcauchy(0.13, 0, 0.4)
dcauchy(0.13, 0, 0.6)
dcauchy(0.13, 0.13, 0.6)
dcauchy(0.13, 0.13, 0.5)
dhcauchy(0.13, 0.13, 0.5)
dhcauchy(0.13, 0, 0.5)*2
dcauchy(0.13, 0, 0.5)*2
pcauchy(0.13, 0, 0.5)*2
dcauchy(0.13, 0, 0.5)
dcauchy(0.14, 0, 0.5)
dcauchy(0.15, 0, 0.5)
dcauchy(0.15, 0, 0.5, lb = 0)*2
install.packages("tfprobability")
library(tfprobability)
library(tfprobability)
tfd_truncated_cauchy(
0.13,
0.5,
0,
name = "TruncatedCauchy"
)
library(tfprobability)
tfd_truncated_cauchy(
0.13,
0.5,
0,
999999999999
name = "TruncatedCauchy"
library(tfprobability)
tfd_truncated_cauchy(
0.13,
0.5,
0,
999999999999,
name = "TruncatedCauchy"
)
